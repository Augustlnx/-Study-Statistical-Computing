---
title: "main_homework"
author: "何啻"
format: html
editor: visual
toc: true
toc-title: "目录"
toc-depth: 2
---

# 零、作业详情预览

![](9月4日作业/9月4日作业要求.png){fig-align="center" width="499"}

# 一、自定义不同数据结构并进行函数运算

这一部分较杂乱，详情见附录下***附录：学习笔记.pdf***文件的R语言学习笔记，其中涵盖了大部分的数据结构。

# 二、电视剧网播量数据集

## **作业题目解答指路：**

a\. 见***2.2探索性数据分析***

b\. 见***2.2.2数据预处理-缺失值检查***部分

c\. 见***2.2.3描述性统计*** 表格部分

数据清洗最后得到的数据集效果预览：

![](images/clipboard-3318414189.png)

## 2.1 库准备与数据导入

```{r}
#加载包
library(readr)  #读取数据
library(dplyr)  #数据处理
library(tidyr)
library(ggplot2)  #数据可视化
library(stringr) 
library(VIM)  #缺失值处理
library(lubridate)
library(kableExtra)
library(moments)    # 计算偏度和峰度
library(knitr)      # 生成表格
library(ggrain)
```

数据导入

```{r}
#导入电视剧数据
data_tv <- read_csv("9月4日作业/CH2_TV.csv", locale = locale(encoding = "GBK"))  
```

## 2.2 探索性数据分析（EDA）

### 2.2.1 数据预览

```{r}
print(data_tv)
```

### 2.2.2 数据预处理

-   缺失值检查

```{r}
#先将所有空值、null、0转变为缺失值，便于查看
data_tv[data_tv[1:nrow(data_tv), ] == ""] <- NA
data_tv[is.null(data_tv)] <- NA
data_tv[data_tv[1:nrow(data_tv), ] == 0] <- NA
data_tv[data_tv[1:nrow(data_tv), ] == "null"] <- NA
data_tv[data_tv[1:nrow(data_tv), ] == '.'] <- NA

#查看哪些变量存在缺失值
aggr(data_tv,plot=FALSE)
aggr(data_tv,combined=T)
```

将**‘剧名’缺失**或者**’点赞‘、’差评‘、’得分‘缺失**的部分删去

```{r}
data_tv_clean <- data_tv %>%
  filter(!is.na(剧名) & (!(is.na(点赞) & is.na(差评) & is.na(得分))))
aggr(data_tv_clean,combined=T)
```

-   将’类型‘转化为**独热编码（One-Hot）格式**

提取所有类型

```{r}
# 创建新数据，保留列名
data_tv1 <- data_tv_clean %>% 
  select(剧名,播放量)
# 转换点赞、差评、得分为数值
data_tv1$点赞 <- as.numeric(gsub(",", "", data_tv_clean$点赞))
data_tv1$差评 <- as.numeric(gsub(",", "", data_tv_clean$差评))
data_tv1$得分 <- as.numeric(data_tv_clean$得分)
# 转换采集日期为日期格式
data_tv1$采集日期 <- ymd_hms(data_tv_clean$采集日期)

# 提取所有类型并去重
(all_types <- str_extract_all(data_tv_clean$类型, "[^\\n/]+") %>% 
  unlist() %>% 
  trimws() %>% 
  unique())


```

编码

```{r}
# 根据提取的类型创建新列
for (type in all_types) {
  if (!is.na(type)) {
  data_tv1[[type]] <- ifelse(
                        !is.na(data_tv_clean$类型) & grepl(type, data_tv_clean$类型),
                        1, 
                        ifelse(is.na(data_tv_clean$类型), NA, 0)
                        )
}}

```

### 2.2.3 描述性统计

```{r}
summary(data_tv1[,3:5])
```

```{r}
tab_01 = data.frame(
  Mean  = c(colMeans(data_tv1[,3:5])),
  SD = c(sapply(data_tv1[,3:5], sd)),
  Median = c(sapply(data_tv1[,3:5], median)),
  Min = c(sapply(data_tv1[,3:5], min)),
  # 计算数据的偏度
  skew = c(sapply(data_tv1[,3:5], skewness)),
  # 计算数据的峰度
  kurt = c(sapply(data_tv1[,3:5], kurtosis)),
  Max = c(sapply(data_tv1[,3:5], max))
) 
## table for descriptive statistics
kable(
  tab_01,
  col.names = c("均值", "标准差", "中位数","偏度","峰度", "最小", "最大"),
  digits = 2,
  caption = "\\label{tab2}Summary Statistics",
  booktabs = T
)
```

### 2.2.4 剧类型分析

```{r}
# 选择all_types对应的列名
selected_columns <- all_types[!is.na(all_types)]

# 删除所有这些列均为NA的行
data_tv2 <- data_tv1 %>% 
  filter(rowSums(is.na(select(., all_of(selected_columns)))) != length(selected_columns))

```

```{r}

# 统计各剧类型的数量
type_counts <- colSums(data_tv2[selected_columns], na.rm = TRUE) # 计算各列的和
type_counts <- data.frame(类型 = names(type_counts), 数量 = type_counts)

# 绘制柱状图
ggplot(type_counts, aes(x = reorder(类型, 数量), y = 数量)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  coord_flip() + 
  labs(title = "各剧类型数量统计", x = "剧类型", y = "数量") +
  theme_minimal()

```

# 三、手机游戏数据集

## **作业题目解答指路：**

a\. 见**3.2 探索性数据分析**与**3.4 数据挖掘**

b\. 计算游戏平均热度，见 **3.4.1对’热度‘和’类别‘的分组探索**

c\. 计算游戏评分相关统计量与分析，详情见**3.4.2对’评分‘和’类别‘的分组探索**和**3.4.3 数据分析：**

d\. 见**3.2 探索性数据分析**其余部分与 **3.5机器学习预测分析方法**

数据清洗和特征工程最后得到的效果预览：

![](images/clipboard-1174423774.png)

## 3.1 库准备与数据导入

```{r}
#加载包
library(readr)  #读取数据
library(dplyr)  #数据处理
library(tidyr)
library(ggplot2)  #数据可视化
library(stringr) 
library(VIM)  #缺失值处理
library(lubridate)
library(kableExtra)
library(moments)    # 计算偏度和峰度
library(knitr)      # 生成表格
library(ggrain)
```

导入数据

```{r}
#导入手机游戏数据
data_game <- read_csv("9月4日作业/CH2_game.csv", locale = locale(encoding = "GBK"))  
```

## 3.2 探索性数据分析（EDA）

### 3.2.1 数据预览

```{r}
print(data_game)
```

### 3.2.2 数据预处理

-   缺失值检查

为什么这里’评论数‘和’喜欢数‘列中将0视为缺失？

当某游戏该列（如评论数）的值为0时，比较表中另一列具有大致相同数值的（喜欢数）其他游戏，可以发现其他游戏的该列（评论数）一般都显著多于0，故而具有几乎相同评论数的该游戏不太可能该列值为0（喜欢数），猜测应该是搜集数据时遇到的搜集失败默认的赋值，为了数据的准确性和真实性，这里需要转化为NA来处理。

```{r}
#先将所有空值、null、0转变为缺失值，便于查看
data_game[data_game[1:nrow(data_game), ] == ""] <- NA
data_game[is.null(data_game)] <- NA
data_game[data_game[1:nrow(data_game), ] == 0] <- NA

#查看哪些变量存在缺失值
aggr(data_game,plot=FALSE)
aggr(data_game,combined=T)
```

将**全部缺失**的部分删去

```{r}
data_game_clean <- data_game %>%
  filter(rowSums(is.na(.)) != ncol(.))
print(paste('删去的行数为：',nrow(data_game)-nrow(data_game_clean)))
aggr(data_game_clean,combined=T)
```

-   将’语言‘转化为**独热编码（One-Hot）格式**

提取所有语言

```{r}
# 创建新数据，排除“语言”列
data_game1 <- data_game_clean %>% 
                              select(-语言)

# 提取所有类型并去重
(all_types <- str_extract_all(data_game_clean$语言, "[^, ]+") %>% 
  unlist() %>% 
  trimws() %>% 
  unique())


```

编码

```{r}
# 根据提取的类型创建新列
for (type in all_types) {
  if (!is.na(type)) {
  data_game1[[type]] <- ifelse(
                  !is.na(data_game_clean$语言) & grepl(type, data_game_clean$语言),
                  1, 
                  ifelse(is.na(data_game_clean$语言), NA, 0)
                  )
}}

```

## 3.3 特征工程

查看当前数据格式

```{r}
print(data_game1)
```

### 3.3.1 将热度提取为数值

```{r}
convert_t_count <- function(t) {
    as.numeric(gsub("℃", "", t)) 
}
data_game1$热度 <- sapply(data_game1$热度, convert_t_count)
```

### 3.3.2 将‘最后更新时间’，‘游戏版本’分别分割提取成新列

```{r}

# 1. 将所有数据（除了‘最后更新时间’，‘游戏版本’）保存至data_game2
data_game2 <- data_game1 %>%
  select(-`最后更新时间`, -`游戏版本`)

# 2. 将‘最后更新时间’提取为新列‘最后更新年’，‘最后更新月’，‘最后更新日’并加入到data_game2
data_game2 <- data_game1 %>%
  mutate(
    最后更新年 = as.integer(format(`最后更新时间`, "%Y")),
    最后更新月 = as.integer(format(`最后更新时间`, "%m")),
    最后更新日 = as.integer(format(`最后更新时间`, "%d"))
  ) %>%
  select(-colnames(data_game1)) %>%
  bind_cols(data_game2)

# 3. 提取游戏版本中的第一个“.”前的数值
data_game2 <- data_game1 %>%
  mutate(
    游戏版本1 = as.integer(ifelse(grepl("^[0-9]+", `游戏版本`), 
                                   str_extract(`游戏版本`, "^[0-9]+"), 
                                   NA))
  )%>%
  select(-colnames(data_game1)) %>%
  bind_cols(data_game2)

# 4. 将特定列转化为因子类型
factor_columns <- c('中文', '英文', '韩文', '日文', '其他', '支持系统', '开发商', '资费', '类别')

data_game2 <- data_game2 %>%
  mutate(across(all_of(factor_columns), as.factor))

# 查看结果
print(data_game2)

```

### 3.3.3 描述性统计

```{r}
select_colnames <- c('游戏版本1','评分','热度','评论数','喜欢数')
numerical_data_game2 <- data_game2[select_colnames]
summary(numerical_data_game2)
```

```{r}
tab_01 = data.frame(
  Mean  = c(colMeans(numerical_data_game2, na.rm = TRUE)),
  SD = c(sapply(numerical_data_game2, sd, na.rm = TRUE)),
  Median = c(sapply(numerical_data_game2, median, na.rm = TRUE)),
  Min = c(sapply(numerical_data_game2, min, na.rm = TRUE)),
  # 计算数据的偏度
  skew = c(sapply(numerical_data_game2, skewness, na.rm = TRUE)),
  # 计算数据的峰度
  kurt = c(sapply(numerical_data_game2, kurtosis, na.rm = TRUE)),
  Max = c(sapply(numerical_data_game2, max, na.rm = TRUE))
) 

# 生成描述性统计表格
kable(
  tab_01,
  col.names = c("均值", "标准差", "中位数","偏度","峰度", "最小", "最大"),
  digits = 2,
  caption = "\\label{tab2}Summary Statistics",
  booktabs = TRUE
)

```

绘制云雨图

```{r}
# 自定义云雨图函数
"%||%" <- function(a, b) {
  if (!is.null(a)) a else b
}
 
 
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
                             position = "dodge", trim = TRUE, scale = "area",
                             show.legend = NA, inherit.aes = TRUE, ...) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomFlatViolin,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      trim = trim,
      scale = scale,
      ...
    )
  )
}
GeomFlatViolin <-
  ggproto("GeomFlatViolin", Geom,
          setup_data = function(data, params) {
            data$width <- data$width %||%
              params$width %||% (resolution(data$x, FALSE) * 0.9)
 
 
            # ymin, ymax, xmin, and xmax define the bounding rectangle for each group
            data %>%
              group_by(group) %>%
              mutate(ymin = min(y),
                     ymax = max(y),
                     xmin = x,
                     xmax = x + width / 2)
 
 
          },
 
 
          draw_group = function(data, panel_scales, coord) {
            # Find the points for the line to go all the way around
            data <- transform(data, xminv = x,
                              xmaxv = x + violinwidth * (xmax - x)) #利用transform函数为数据框mydata增加数据
 
 
            newdata <- rbind(plyr::arrange(transform(data, x = xmaxv), -y),plyr::arrange(transform(data, x = xminv), y))
            newdata_Polygon <- rbind(newdata, newdata[1,])
            newdata_Polygon$colour<-NA
 
 
            newdata_Path <- plyr::arrange(transform(data, x = xmaxv), -y)
 
 
            ggplot2:::ggname("geom_flat_violin", grobTree(
              GeomPolygon$draw_panel(newdata_Polygon, panel_scales, coord),
              GeomPath$draw_panel(newdata_Path, panel_scales, coord))
            )
          },
 
 
          draw_key = draw_key_polygon,
 
 
          default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
                            alpha = NA, linetype = "solid"),
 
 
          required_aes = c("x", "y")
  )
 
 
```

```{r}
library(grid)
library(RColorBrewer)
library(SuppDists) #提供rJohnson()函数

#为了画图方便，舍弃评分列缺少的行
data_game3 <- filter(data_game2, !is.na(`评分`))

f2.data <- data_game3[c('类别','评分')]
colnames(f2.data) <- c("类别","评分")
table(f2.data$类别)
```

```{r}
# 定义颜色
mycol22 <- c("#eb998b", "#fddbc8", "#42465c", "#356d67", "#4c9568",
             "#7fb961", "#b0d45d", "#ffe788", "#b20000", "#f06152",
             "#7d4444", "#9e6c69", "#cca69c", "#5066a1", "#76afda",
             "#abddff", "#dcf2ff", "#e8743c", "#ffc556")

# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
  summarize(mean = mean(评分),
            sd = sd(评分))

# 创建图形
ggplot(f2.data, aes(类别, 评分, fill = 类别, color = 类别)) +
  geom_flat_violin(position = position_nudge(x = .2)) +
  geom_jitter(width = .1) +
  geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
                  data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
  scale_fill_manual(values = mycol22) +  # 设置填充颜色
  scale_color_manual(values = mycol22) +  # 设置点的颜色
  theme_bw() +
  theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
        axis.text.y = element_text(size = 13),
        axis.title = element_text(size = 15),
        legend.position = "none")
```

## 3.4 数据挖掘

### 3.4.1 对’热度‘和’类别‘的分组探索

```{r}

# 对‘热度’进行分组统计
tab_01 <- data_game2 %>%
  group_by(类别) %>%
  summarise(
    Mean = mean(热度, na.rm = TRUE),
    SD = sd(热度, na.rm = TRUE),
    Median = median(热度, na.rm = TRUE),
    Min = min(热度, na.rm = TRUE),
    skew = skewness(热度, na.rm = TRUE),
    kurt = kurtosis(热度, na.rm = TRUE),
    Max = max(热度, na.rm = TRUE)
  )

# 生成描述性统计表格
kable(
  tab_01,
  col.names = c("类别", "均值", "标准差", "中位数", "最小", "偏度", "峰度", "最大"),
  digits = 2,
  caption = "\\label{tab2}Summary Statistics by Category",
  booktabs = TRUE
)

```

```{r}
# 对 tab_01 按 Mean 进行降序排序，并提取平均热度最高的游戏类型
highest_mean_category <- tab_01 %>%
  arrange(desc(Mean)) %>%
  slice(1) %>%
  pull(类别)

# 打印结果
print(paste('平均热度最高的游戏类型是：', highest_mean_category))

```

### 3.4.2 对’评分‘和’类别‘的分组探索

```{r}
# 对‘评分’进行分组统计
tab_01 <- data_game2 %>%
  group_by(类别) %>%
  summarise(
    Mean = mean(评分, na.rm = TRUE),
    SD = sd(评分, na.rm = TRUE),
    Median = median(评分, na.rm = TRUE),
    Min = min(评分, na.rm = TRUE),
    skew = skewness(评分, na.rm = TRUE),
    kurt = kurtosis(评分, na.rm = TRUE),
    Max = max(评分, na.rm = TRUE)
  )

# 生成描述性统计表格
kable(
  tab_01,
  col.names = c("类别", "均值", "标准差", "中位数", "最小", "偏度", "峰度", "最大"),
  digits = 2,
  caption = "\\label{tab2}Summary Statistics by Category",
  booktabs = TRUE
)
```

### **3.4.3 数据分析**

回顾前面的云雨图：

![](images/clipboard-4065424683.png)

1\. **游戏特性分析**

-   **角色扮演游戏（RPG）**：

    **高平均评分**（均值 7.00）和**中位数**（7.50）表明，RPG 游戏普遍受欢迎。RPG 通常具有深入的剧情、复杂的角色成长系统，这些特点吸引了偏好长时间投入游戏的用户。

    **较低的偏度和峰度**：评分分布较为均匀，说明大部分 RPG 游戏都有稳定的玩家群体，不会因为少数特别热门或冷门的游戏拉大差距。

    **用户画像：**这些游戏通常吸引偏好深度体验、喜欢投入时间发展的用户。用户可能偏向中青年群体，男性用户比例较高，且有一定的收入和消费能力，愿意在游戏中进行内购以提升游戏体验。

-   **策略塔防**：

    **高评分且分布较为均匀**：策略塔防游戏的平均评分较高，说明玩家对这类需要深思熟虑和战略规划的游戏有较高的需求。

    **用户画像：**这类游戏通常吸引喜欢挑战思维和策略的玩家，可能偏向高智商和耐心的用户群体。

-   **飞行游戏**：

    **低平均评分**和**较高偏度**：飞行游戏整体评分较低，但存在少数非常受欢迎的游戏（如模拟飞行或空战游戏），但大部分游戏评分均比较低。

    **用户画像：**这类游戏可能吸引的是寻求刺激感和成就感的用户，例如飞行爱好者或军事迷，故而对游戏的特定部分具有较高的仿真要求，只有少数制作精美的游戏才能够获得玩家认可，侧面反应了该领域游戏制作的门槛较高。

-   **游戏工具**：

    **低评分和高偏度**：游戏工具的评分分布显示出较大的波动，主要是由于该类型的软件数量不足、质量参差不齐的原因。说明这个类别的产品质量或用户需求差异较大，开发市场前景较高。部分工具类应用可能非常有用，而其他则可能因为功能或体验不足而被冷落，用户可能更多是硬核玩家，他们需要辅助工具来提升游戏体验。不过相较于传统的游戏，辅助工具获得的评分一般来说并不和游戏具有统一的参考标准。

2\. **市场趋势与用户行为**

-   **多样化需求与长尾效应**：

    从数据中的高峰度和高偏度现象可以看出，许多游戏类型可能存在“长尾效应”，即大部分游戏的评分较为平均，但少数特别受欢迎的游戏则占据了大量市场份额。这表明，虽然玩家对主流游戏类型有共识，但对于特定类型的利基市场需求依然存在。

-   **游戏工具的应用**：

    尽管平均评分较低，游戏工具类应用显示出较大的潜力，特别是对于专业玩家或某些硬核游戏的玩家群体。随着游戏复杂度和对专业化需求的增加，这一类应用可能会进一步发展。

-   **变化的用户兴趣**：

    例如，休闲益智游戏虽然整体评分适中，但最大评分达到9.6，表明这类游戏依然能产生爆款。结合移动互联网的发展，轻度和快餐式的游戏体验仍然是一个重要的市场。

3\. **进一步的商业策略建议**

-   **针对硬核玩家的深度产品**：

    RPG、策略塔防和射击游戏等类型可以通过更高质量的内容、更复杂的游戏机制吸引核心玩家，并通过内购和订阅模式增加收入。

-   **扩展休闲游戏的市场**：

    休闲游戏的开发者可以考虑通过简单的游戏机制和社交互动功能吸引更广泛的用户群体，特别是通过社交媒体平台推广，以便迅速获取用户。

-   **工具类应用的商业潜力**：

    为游戏工具应用开发更专业和更精确的功能，特别是在电竞领域，可以吸引那些对游戏提升有强烈需求的用户群体，从而增加用户粘性和变现能力。

### 3.4.4 其他有趣的性质1：变量相关热图

```{r}
library(corrplot)
data_game4 <- filter(data_game3,!is.na(`评分`)&!is.na(`热度`)&!is.na(`评论数`)&!is.na(`喜欢数`))
# 相关系数矩阵
correlations <- cor(data_game4[c('评分','热度','评论数','喜欢数')])
dim(correlations)
# 可视化相关系数矩阵
corrplot(correlations, order = "hclust",tl.col = "black", addCoef.col = "white")
```

通过该图可以发现某些性质：

-   喜欢数和评论数相关性较高，可能因为喜欢数和评论数都是在游戏介绍界面的交互，会在游戏商品栏界面点击“喜欢”的人往往也会顺便进行评论留言，反之亦然。

-   评分和热度之间相关性并不高，可能热度往往表现的是一个游戏短期内的“流量”而并非长期的“质量”。

-   评分与“评论数”、“喜欢数”的相关系数相近，也就意味着后两者所反应的“游戏质量”的程度相近，但是评论数和热度的相关系数明显高于喜欢数和热度的相关系数，也说明了其实一个游戏的热度本质上被如何衡量，高热度的游戏往往引发更多的讨论，但这些褒贬不一的评论并不会带来等效程度的喜欢数，即高热度并不意味着高评分。

### 3.4.5 其他变量的云雨图

1.  **热度**

```{r}
library(grid)
library(RColorBrewer)
library(SuppDists) #提供rJohnson()函数

#为了画图方便，舍弃评分列缺少的行
data_game3 <- filter(data_game2, !is.na(`热度`))

f2.data <- data_game3[c('类别','热度')]
colnames(f2.data) <- c("类别","热度")
table(f2.data$类别)
# 定义颜色
mycol22 <- c("#eb998b", "#fddbc8", "#42465c", "#356d67", "#4c9568",
             "#7fb961", "#b0d45d", "#ffe788", "#b20000", "#f06152",
             "#7d4444", "#9e6c69", "#cca69c", "#5066a1", "#76afda",
             "#abddff", "#dcf2ff", "#e8743c", "#ffc556")

# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
  summarize(mean = mean(热度),
            sd = sd(热度))

# 创建图形
ggplot(f2.data, aes(类别, 热度, fill = 类别, color = 类别)) +
  geom_flat_violin(position = position_nudge(x = .2)) +
  geom_jitter(width = .1) +
  geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
                  data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
  scale_fill_manual(values = mycol22) +  # 设置填充颜色
  scale_color_manual(values = mycol22) +  # 设置点的颜色
  theme_bw() +
  theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
        axis.text.y = element_text(size = 13),
        axis.title = element_text(size = 15),
        legend.position = "none")
```

首先，热度往往呈现的是非对称、有偏度的分布，主要的极端值都聚集在高热度上，也可能因为过低的热度往往被截断为0而不会出现较低值。

进一步，可以看到近期游戏热度大部分集中在**动作游戏、体育运动、益智休闲**等类型游戏，可能意味着此类型游戏是近期游戏市场热度风口，有一定挖掘潜力的发展空间。反之**模拟经营、棋牌游戏、音乐游戏**等类别热度较集中，没有出现极端热度的情况，说明该类型游戏的领域整体在此时并不怎么流行，再对比评分的分布情况，可以发现这些类型游戏普遍评分也不高，猜测这些类型的游戏公司还没有做出足够优秀的作品，整体上较难获得玩家的认可。

2.  **评论数**

```{r}
library(grid)
library(RColorBrewer)
library(SuppDists) #提供rJohnson()函数

#为了画图方便，舍弃评论数列缺少的行
data_game3 <- filter(data_game2, !is.na(`评论数`))

f2.data <- data_game3[c('类别','评论数')]
colnames(f2.data) <- c("类别","评论数")
# 定义颜色
mycol22 <- c("#eb998b", "#fddbc8", "#42465c", "#356d67", "#4c9568",
             "#7fb961", "#b0d45d", "#ffe788", "#b20000", "#f06152",
             "#7d4444", "#9e6c69", "#cca69c", "#5066a1", "#76afda",
             "#abddff", "#dcf2ff", "#e8743c", "#ffc556")

# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
  summarize(mean = mean(评论数),
            sd = sd(评论数))

# 创建图形
ggplot(f2.data, aes(类别, 评论数, fill = 类别, color = 类别)) +
  geom_flat_violin(position = position_nudge(x = .2)) +
  geom_jitter(width = .1) +
  geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
                  data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
  scale_fill_manual(values = mycol22) +  # 设置填充颜色
  scale_color_manual(values = mycol22) +  # 设置点的颜色
  theme_bw() +
  theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
        axis.text.y = element_text(size = 13),
        axis.title = element_text(size = 15),
        legend.position = "none")
```

这里图画出来显然不太好看，因为有极端的评论数破坏了整体的范围，我们先找出这些极端的评论数并尝试删去最多的3个，再进行画图：

```{r}
# 找出评论数最高的三个数据点
(top_3_outliers <- data_game3  %>% 
  top_n(3, wt = 评论数))

# 从数据中删除这三个数据点
f2.data <- anti_join(data_game3, top_3_outliers, by = c("类别", "评论数"))[c('类别','评论数')]
colnames(f2.data) <- c("类别","评论数")
# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
  summarize(mean = mean(评论数),
            sd = sd(评论数))

# 创建图形
ggplot(f2.data, aes(类别, 评论数, fill = 类别, color = 类别)) +
  geom_flat_violin(position = position_nudge(x = .2)) +
  geom_jitter(width = .1) +
  geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
                  data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
  scale_fill_manual(values = mycol22) +  # 设置填充颜色
  scale_color_manual(values = mycol22) +  # 设置点的颜色
  theme_bw() +
  theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
        axis.text.y = element_text(size = 13),
        axis.title = element_text(size = 15),
        legend.position = "none")
```

评论数断崖式领先的三个游戏分别为：**GTA侠盗猎车手:圣安地列斯、我的世界移动版、GTA侠盗猎车手:罪恶都市**，这些作为当年的知名游戏拥有大量的评论并不奇怪，甚至当之无愧。

对于其他类型的游戏，大部分游戏都较为集中，同样只有少部分游戏拥有几乎“异常”高的评论数，这正说明了游戏市场的厚尾性，即少部分高质量游戏断崖式遥遥领先大部分平庸的游戏。

3.  **喜欢数**

```{r}
#为了画图方便，舍弃评论数列缺少的行
data_game3 <- filter(data_game2, !is.na(`喜欢数`))

f2.data <- data_game3[c('类别','喜欢数')]
colnames(f2.data) <- c("类别","喜欢数")
# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
  summarize(mean = mean(喜欢数),
            sd = sd(喜欢数))

# 创建图形
ggplot(f2.data, aes(类别, 喜欢数, fill = 类别, color = 类别)) +
  geom_flat_violin(position = position_nudge(x = .2)) +
  geom_jitter(width = .1) +
  geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
                  data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
  scale_fill_manual(values = mycol22) +  # 设置填充颜色
  scale_color_manual(values = mycol22) +  # 设置点的颜色
  theme_bw() +
  theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
        axis.text.y = element_text(size = 13),
        axis.title = element_text(size = 15),
        legend.position = "none")
```

还是通过肉眼筛查极端异常值的数量，去掉最高的3个

```{r}
# 找出评论数最高的三个数据点
(top_3_outliers <- data_game3  %>% 
  top_n(3, wt = 喜欢数))

# 从数据中删除这三个数据点
f2.data <- anti_join(data_game3, top_3_outliers, by = c("类别", "喜欢数"))[c('类别','喜欢数')]
colnames(f2.data) <- c("类别","喜欢数")
# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
  summarize(mean = mean(喜欢数),
            sd = sd(喜欢数))

# 创建图形
ggplot(f2.data, aes(类别, 喜欢数, fill = 类别, color = 类别)) +
  geom_flat_violin(position = position_nudge(x = .2)) +
  geom_jitter(width = .1) +
  geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
                  data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
  scale_fill_manual(values = mycol22) +  # 设置填充颜色
  scale_color_manual(values = mycol22) +  # 设置点的颜色
  theme_bw() +
  theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
        axis.text.y = element_text(size = 13),
        axis.title = element_text(size = 15),
        legend.position = "none")
```

数据分布的结论大致与评论数类似，但是除了游戏“GTA侠盗猎车手:圣安地列斯”仍然位居最高喜欢数的前几位，其余游戏并不和原来评论数的最高前3位一致，这也进一步说明了喜爱数和评论数并非高度相关。

## **3.5 机器学习预测分析方法**

### 3.5.1 库导入与数据集分割

```{r}
# 加载必要的包
library(dplyr)
library(caret)  # 用于数据集的分割
library(lightgbm)  # 用于LightGBM模型
library(Metrics)
# 将指定列转换为因子类型
factor_columns <- c('类别', '资费', '开发商', '支持系统', '中文', '韩文', '英文', '日文', '其他')
data_game3 <- filter(data_game2, !is.na(`评分`))
data_game3 <- data_game3 %>%
  mutate_at(factor_columns, as.factor)

# 分割数据集为训练集和测试集7:3
set.seed(123)
train_index <- createDataPartition(data_game3$评分, p = 0.7, list = FALSE)
train_data <- data_game3[train_index, ]
test_data <- data_game3[-train_index, ]

# 准备LightGBM所需的数据格式
# 1. 将训练集和测试集中的目标列（评分）和特征分开
y_train <- train_data$评分
y_test <- test_data$评分

# 再将训练集分为训练子集和验证集，按照80:20的比例
train_sub_index <- createDataPartition(train_data$评分, p = 0.8, list = FALSE)
train_data <- train_data[train_sub_index, ]
valid_data <- train_data[-train_sub_index, ]
y_train <- y_train[train_sub_index]
y_valid <- y_train[-train_sub_index]


# 删除目标列和 '游戏名称' 列，保留自变量
train_data <- train_data %>% select(-评分, -游戏名称)
valid_data <- valid_data %>% select(-评分, -游戏名称)
test_data <- test_data %>% select(-评分, -游戏名称)

train_matrix <- as.matrix(train_data)
valid_matrix <- as.matrix(valid_data)
test_matrix <- as.matrix(test_data)
train_lgb <- lgb.Dataset(data = train_matrix, label = y_train)
valid_lgb <- lgb.Dataset(data = valid_matrix, label = y_valid)

```

### 3.5.2 构建预测模型

```{r}
# 设置LightGBM的参数
params <- list(
  boosting_type = "gbdt",
  objective = "regression",
  metric = "rmse",
  learning_rate = 0.01,
  feature_fraction = 0.9
)
# 设置验证集
valids <- list(train = train_lgb, valid = valid_lgb)

# 训练LightGBM模型
lgb <- lgb.train(
  params = params,
  data = train_lgb,
  nrounds = 500,  # 训练轮数
  valids = valids,
  early_stopping_rounds = 10,  # 如果验证集10轮没有提升，提前停止
  verbose = -1
)

```

### 3.5.3 模型效果评估

我们这里只构建一个简单的预测模型baseline来观察一下数据之间在“预测”上的交互联系，通过简单的调参，大致可以得知拟合效果一般，原因有可能是

-   数据集过小大致只有900多条，传统的机器学习模型一般在万为单位的数据集上表现更好，在小数据集上容易出现参数过多导致的过拟合。

-   数据集本身内含的信息过少，不足以提供足够的细节来预测评分。

```{r}
# 对训练集进行预测并计算各项指标
predicted_train <- predict(lgb, train_matrix)
train_rmse <- rmse(y_train, predicted_train)
train_mse <- mean((predicted_train - y_train)^2)
sst_train <- sum((y_train - mean(y_train))^2)
sse_train <- sum((y_train - predicted_train)^2)
r_squared_train <- 1 - sse_train / sst_train

# # 打印训练集结果
# print(paste("训练集 RMSE:", train_rmse))
# print(paste("训练集 MSE:", train_mse))
# print(paste("训练集 R²:", r_squared_train))

# 对测试集进行预测并计算各项指标
predicted_test <- predict(lgb, test_matrix)
test_rmse <- rmse(y_test, predicted_test)
test_mse <- mean((predicted_test - y_test)^2)
sst_test <- sum((y_test - mean(y_test))^2)
sse_test <- sum((y_test - predicted_test)^2)
r_squared_test <- 1 - sse_test / sst_test
# 
# # 打印测试集结果
# print(paste("测试集 RMSE:", test_rmse))
# print(paste("测试集 MSE:", test_mse))
# print(paste("测试集 R²:", r_squared_test))

# 创建数据框
lgb_model_eval <- data.frame(
  model = rep("LGB", 2),
  mse = c(train_mse, test_mse),
  rmse = c(train_rmse, test_rmse),
  R2 = c(r_squared_train, r_squared_test),
  dataset = factor(c("train", "test"))
)

# 打印结果
print(lgb_model_eval)

```

### 3.5.4 模型解释性分析

由于模型拟合效果不强，我们只能简单地利用shap值做一个草率的分析，所得到的信息无法完全来解释每一个变量对预测的贡献：

首先我们计算shap值：

```{r}
library(shapviz)
shp_lgb <- shapviz(lgb,X_pred =train_matrix)

```

我们选择训练集的第二条数据来展示，该游戏的各项特征如何影响最终评分的输出，可以看到：

-   主要的贡献由评论数提供。对此的解释为评论本身需要玩家玩完游戏进一步思考和打字才能实现的交互，玩家往往更乐意对更优秀/评分高的游戏多费功夫来发表自己的感受

-   最后更新年数也提供了对评分的一定共享，通常来说最后更新年数越晚说明游戏仍然在频繁运营和更新，侧面反应了该公司看好该游戏的发展前景，其原因正来自于玩家对该游戏的喜爱与认可

但也正因为模型总体拟合效果较差，所以该瀑布图并无法很好的解释所有变量的作用。

```{r}
#展示shap值
choose_row <- 2
sv_waterfall(shp_lgb,row_id = choose_row,max_display = 20)#瀑布图
sv_force(shp_lgb,row_id = choose_row,max_display = 20)#缩合图

```

那么对于每一个特征来说，模型在判断评分时依赖的每个特征的重要程度应该怎么衡量呢？通过该方法我们也可以简单列出一个散点图和柱状图来展示这一情况，以下两张图是采用不同表现形式对重要性的展示，总的来说，**评论数、喜欢数、热度**贡献最大、依次递减，这一结果是符合直觉的，毕竟他们都是数据中为数不多的数值型特征，至于最后更新的时间信息为什么占据很高的贡献度呢？一种解释正如上面所说，这间接反应了游戏开发者收到游戏市场反馈的决策，进而可以度量出游戏本身受到的认可。

```{r}
#特征重要性评估
sv_importance(shp_lgb, kind = "beeswarm")#散点总结图
sv_importance(shp_lgb,fill="#fee08b")#条形图
```
