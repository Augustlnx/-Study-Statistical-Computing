select(剧名,播放量)
# 转换点赞、差评、得分为数值
data_tv1$点赞 <- as.numeric(gsub(",", "", data_tv_clean$点赞))
data_tv1$差评 <- as.numeric(gsub(",", "", data_tv_clean$差评))
data_tv1$得分 <- as.numeric(data_tv_clean$得分)
# 转换采集日期为日期格式
data_tv1$采集日期 <- ymd_hms(data_tv_clean$采集日期)
# 提取所有类型并去重
(all_types <- str_extract_all(data_tv_clean$类型, "[^\\n/]+") %>%
unlist() %>%
trimws() %>%
unique())
# 根据提取的类型创建新列
for (type in all_types) {
if (!is.na(type)) {
data_tv1[[type]] <- ifelse(
!is.na(data_tv_clean$类型) & grepl(type, data_tv_clean$类型),
1,
ifelse(is.na(data_tv_clean$类型), NA, 0)
)
}}
summary(data_tv1[,3:5])
tab_01 = data.frame(
Mean  = c(colMeans(data_tv1[,3:5])),
SD = c(sapply(data_tv1[,3:5], sd)),
Median = c(sapply(data_tv1[,3:5], median)),
Min = c(sapply(data_tv1[,3:5], min)),
# 计算数据的偏度
skew = c(sapply(data_tv1[,3:5], skewness)),
# 计算数据的峰度
kurt = c(sapply(data_tv1[,3:5], kurtosis)),
Max = c(sapply(data_tv1[,3:5], max))
)
## table for descriptive statistics
kable(
tab_01,
col.names = c("均值", "标准差", "中位数","偏度","峰度", "最小", "最大"),
digits = 2,
caption = "\\label{tab2}Summary Statistics",
booktabs = T
)
# 选择all_types对应的列名
selected_columns <- all_types[!is.na(all_types)]
# 删除所有这些列均为NA的行
data_tv2 <- data_tv1 %>%
filter(rowSums(is.na(select(., all_of(selected_columns)))) != length(selected_columns))
# 统计各剧类型的数量
type_counts <- colSums(data_tv2[selected_columns], na.rm = TRUE) # 计算各列的和
type_counts <- data.frame(类型 = names(type_counts), 数量 = type_counts)
# 绘制柱状图
ggplot(type_counts, aes(x = reorder(类型, 数量), y = 数量)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "各剧类型数量统计", x = "剧类型", y = "数量") +
theme_minimal()
#加载包
library(readr)  #读取数据
library(dplyr)  #数据处理
library(tidyr)
library(ggplot2)  #数据可视化
library(stringr)
library(VIM)  #缺失值处理
library(lubridate)
library(kableExtra)
library(moments)    # 计算偏度和峰度
library(knitr)      # 生成表格
library(ggrain)
#导入手机游戏数据
data_game <- read_csv("9月4日作业/CH2_game.csv", locale = locale(encoding = "GBK"))
print(data_game)
#先将所有空值、null、0转变为缺失值，便于查看
data_game[data_game[1:nrow(data_game), ] == ""] <- NA
data_game[is.null(data_game)] <- NA
data_game[data_game[1:nrow(data_game), ] == 0] <- NA
#查看哪些变量存在缺失值
aggr(data_game,plot=FALSE)
aggr(data_game,combined=T)
data_game_clean <- data_game %>%
filter(rowSums(is.na(.)) != ncol(.))
print(paste('删去的行数为：',nrow(data_game)-nrow(data_game_clean)))
aggr(data_game_clean,combined=T)
# 创建新数据，排除“语言”列
data_game1 <- data_game_clean %>%
select(-语言)
# 提取所有类型并去重
(all_types <- str_extract_all(data_game_clean$语言, "[^, ]+") %>%
unlist() %>%
trimws() %>%
unique())
# 根据提取的类型创建新列
for (type in all_types) {
if (!is.na(type)) {
data_game1[[type]] <- ifelse(
!is.na(data_game_clean$语言) & grepl(type, data_game_clean$语言),
1,
ifelse(is.na(data_game_clean$语言), NA, 0)
)
}}
print(data_game1)
convert_t_count <- function(t) {
as.numeric(gsub("℃", "", t))
}
data_game1$热度 <- sapply(data_game1$热度, convert_t_count)
# 1. 将所有数据（除了‘最后更新时间’，‘游戏版本’）保存至data_game2
data_game2 <- data_game1 %>%
select(-`最后更新时间`, -`游戏版本`)
# 2. 将‘最后更新时间’提取为新列‘最后更新年’，‘最后更新月’，‘最后更新日’并加入到data_game2
data_game2 <- data_game1 %>%
mutate(
最后更新年 = as.integer(format(`最后更新时间`, "%Y")),
最后更新月 = as.integer(format(`最后更新时间`, "%m")),
最后更新日 = as.integer(format(`最后更新时间`, "%d"))
) %>%
select(-colnames(data_game1)) %>%
bind_cols(data_game2)
# 3. 提取游戏版本中的第一个“.”前的数值
data_game2 <- data_game1 %>%
mutate(
游戏版本1 = as.integer(ifelse(grepl("^[0-9]+", `游戏版本`),
str_extract(`游戏版本`, "^[0-9]+"),
NA))
)%>%
select(-colnames(data_game1)) %>%
bind_cols(data_game2)
# 4. 将特定列转化为因子类型
factor_columns <- c('中文', '英文', '韩文', '日文', '其他', '支持系统', '开发商', '资费', '类别')
data_game2 <- data_game2 %>%
mutate(across(all_of(factor_columns), as.factor))
# 查看结果
print(data_game2)
select_colnames <- c('游戏版本1','评分','热度','评论数','喜欢数')
numerical_data_game2 <- data_game2[select_colnames]
summary(numerical_data_game2)
tab_01 = data.frame(
Mean  = c(colMeans(numerical_data_game2, na.rm = TRUE)),
SD = c(sapply(numerical_data_game2, sd, na.rm = TRUE)),
Median = c(sapply(numerical_data_game2, median, na.rm = TRUE)),
Min = c(sapply(numerical_data_game2, min, na.rm = TRUE)),
# 计算数据的偏度
skew = c(sapply(numerical_data_game2, skewness, na.rm = TRUE)),
# 计算数据的峰度
kurt = c(sapply(numerical_data_game2, kurtosis, na.rm = TRUE)),
Max = c(sapply(numerical_data_game2, max, na.rm = TRUE))
)
# 生成描述性统计表格
kable(
tab_01,
col.names = c("均值", "标准差", "中位数","偏度","峰度", "最小", "最大"),
digits = 2,
caption = "\\label{tab2}Summary Statistics",
booktabs = TRUE
)
# 自定义云雨图函数
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x)) #利用transform函数为数据框mydata增加数据
newdata <- rbind(plyr::arrange(transform(data, x = xmaxv), -y),plyr::arrange(transform(data, x = xminv), y))
newdata_Polygon <- rbind(newdata, newdata[1,])
newdata_Polygon$colour<-NA
newdata_Path <- plyr::arrange(transform(data, x = xmaxv), -y)
ggplot2:::ggname("geom_flat_violin", grobTree(
GeomPolygon$draw_panel(newdata_Polygon, panel_scales, coord),
GeomPath$draw_panel(newdata_Path, panel_scales, coord))
)
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
library(grid)
library(RColorBrewer)
library(SuppDists) #提供rJohnson()函数
#为了画图方便，舍弃评分列缺少的行
data_game3 <- filter(data_game2, !is.na(`评分`))
f2.data <- data_game3[c('类别','评分')]
colnames(f2.data) <- c("类别","评分")
table(f2.data$类别)
# 定义颜色
mycol22 <- c("#eb998b", "#fddbc8", "#42465c", "#356d67", "#4c9568",
"#7fb961", "#b0d45d", "#ffe788", "#b20000", "#f06152",
"#7d4444", "#9e6c69", "#cca69c", "#5066a1", "#76afda",
"#abddff", "#dcf2ff", "#e8743c", "#ffc556")
# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
summarize(mean = mean(评分),
sd = sd(评分))
# 创建图形
ggplot(f2.data, aes(类别, 评分, fill = 类别, color = 类别)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1) +
geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
scale_fill_manual(values = mycol22) +  # 设置填充颜色
scale_color_manual(values = mycol22) +  # 设置点的颜色
theme_bw() +
theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
axis.text.y = element_text(size = 13),
axis.title = element_text(size = 15),
legend.position = "none")
# 对‘热度’进行分组统计
tab_01 <- data_game2 %>%
group_by(类别) %>%
summarise(
Mean = mean(热度, na.rm = TRUE),
SD = sd(热度, na.rm = TRUE),
Median = median(热度, na.rm = TRUE),
Min = min(热度, na.rm = TRUE),
skew = skewness(热度, na.rm = TRUE),
kurt = kurtosis(热度, na.rm = TRUE),
Max = max(热度, na.rm = TRUE)
)
# 生成描述性统计表格
kable(
tab_01,
col.names = c("类别", "均值", "标准差", "中位数", "最小", "偏度", "峰度", "最大"),
digits = 2,
caption = "\\label{tab2}Summary Statistics by Category",
booktabs = TRUE
)
# 对 tab_01 按 Mean 进行降序排序，并提取平均热度最高的游戏类型
highest_mean_category <- tab_01 %>%
arrange(desc(Mean)) %>%
slice(1) %>%
pull(类别)
# 打印结果
print(paste('平均热度最高的游戏类型是：', highest_mean_category))
# 对‘评分’进行分组统计
tab_01 <- data_game2 %>%
group_by(类别) %>%
summarise(
Mean = mean(评分, na.rm = TRUE),
SD = sd(评分, na.rm = TRUE),
Median = median(评分, na.rm = TRUE),
Min = min(评分, na.rm = TRUE),
skew = skewness(评分, na.rm = TRUE),
kurt = kurtosis(评分, na.rm = TRUE),
Max = max(评分, na.rm = TRUE)
)
# 生成描述性统计表格
kable(
tab_01,
col.names = c("类别", "均值", "标准差", "中位数", "最小", "偏度", "峰度", "最大"),
digits = 2,
caption = "\\label{tab2}Summary Statistics by Category",
booktabs = TRUE
)
library(corrplot)
data_game4 <- filter(data_game3,!is.na(`评分`)&!is.na(`热度`)&!is.na(`评论数`)&!is.na(`喜欢数`))
# 相关系数矩阵
correlations <- cor(data_game4[c('评分','热度','评论数','喜欢数')])
dim(correlations)
# 可视化相关系数矩阵
corrplot(correlations, order = "hclust",tl.col = "black", addCoef.col = "white")
library(grid)
library(RColorBrewer)
library(SuppDists) #提供rJohnson()函数
#为了画图方便，舍弃评分列缺少的行
data_game3 <- filter(data_game2, !is.na(`热度`))
f2.data <- data_game3[c('类别','热度')]
colnames(f2.data) <- c("类别","热度")
table(f2.data$类别)
# 定义颜色
mycol22 <- c("#eb998b", "#fddbc8", "#42465c", "#356d67", "#4c9568",
"#7fb961", "#b0d45d", "#ffe788", "#b20000", "#f06152",
"#7d4444", "#9e6c69", "#cca69c", "#5066a1", "#76afda",
"#abddff", "#dcf2ff", "#e8743c", "#ffc556")
# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
summarize(mean = mean(热度),
sd = sd(热度))
# 创建图形
ggplot(f2.data, aes(类别, 热度, fill = 类别, color = 类别)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1) +
geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
scale_fill_manual(values = mycol22) +  # 设置填充颜色
scale_color_manual(values = mycol22) +  # 设置点的颜色
theme_bw() +
theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
axis.text.y = element_text(size = 13),
axis.title = element_text(size = 15),
legend.position = "none")
library(grid)
library(RColorBrewer)
library(SuppDists) #提供rJohnson()函数
#为了画图方便，舍弃评论数列缺少的行
data_game3 <- filter(data_game2, !is.na(`评论数`))
f2.data <- data_game3[c('类别','评论数')]
colnames(f2.data) <- c("类别","评论数")
# 定义颜色
mycol22 <- c("#eb998b", "#fddbc8", "#42465c", "#356d67", "#4c9568",
"#7fb961", "#b0d45d", "#ffe788", "#b20000", "#f06152",
"#7d4444", "#9e6c69", "#cca69c", "#5066a1", "#76afda",
"#abddff", "#dcf2ff", "#e8743c", "#ffc556")
# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
summarize(mean = mean(评论数),
sd = sd(评论数))
# 创建图形
ggplot(f2.data, aes(类别, 评论数, fill = 类别, color = 类别)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1) +
geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
scale_fill_manual(values = mycol22) +  # 设置填充颜色
scale_color_manual(values = mycol22) +  # 设置点的颜色
theme_bw() +
theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
axis.text.y = element_text(size = 13),
axis.title = element_text(size = 15),
legend.position = "none")
# 找出评论数最高的三个数据点
(top_3_outliers <- data_game3  %>%
top_n(3, wt = 评论数))
# 从数据中删除这三个数据点
f2.data <- anti_join(data_game3, top_3_outliers, by = c("类别", "评论数"))[c('类别','评论数')]
colnames(f2.data) <- c("类别","评论数")
# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
summarize(mean = mean(评论数),
sd = sd(评论数))
# 创建图形
ggplot(f2.data, aes(类别, 评论数, fill = 类别, color = 类别)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1) +
geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
scale_fill_manual(values = mycol22) +  # 设置填充颜色
scale_color_manual(values = mycol22) +  # 设置点的颜色
theme_bw() +
theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
axis.text.y = element_text(size = 13),
axis.title = element_text(size = 15),
legend.position = "none")
#为了画图方便，舍弃评论数列缺少的行
data_game3 <- filter(data_game2, !is.na(`喜欢数`))
f2.data <- data_game3[c('类别','喜欢数')]
colnames(f2.data) <- c("类别","喜欢数")
# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
summarize(mean = mean(喜欢数),
sd = sd(喜欢数))
# 创建图形
ggplot(f2.data, aes(类别, 喜欢数, fill = 类别, color = 类别)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1) +
geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
scale_fill_manual(values = mycol22) +  # 设置填充颜色
scale_color_manual(values = mycol22) +  # 设置点的颜色
theme_bw() +
theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
axis.text.y = element_text(size = 13),
axis.title = element_text(size = 15),
legend.position = "none")
# 找出评论数最高的三个数据点
(top_3_outliers <- data_game3  %>%
top_n(3, wt = 喜欢数))
# 从数据中删除这三个数据点
f2.data <- anti_join(data_game3, top_3_outliers, by = c("类别", "喜欢数"))[c('类别','喜欢数')]
colnames(f2.data) <- c("类别","喜欢数")
# 计算每个类别的均值和标准差
d <- group_by(f2.data, 类别) %>%
summarize(mean = mean(喜欢数),
sd = sd(喜欢数))
# 创建图形
ggplot(f2.data, aes(类别, 喜欢数, fill = 类别, color = 类别)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1) +
geom_pointrange(aes(y = mean, ymin = mean - sd, ymax = mean + sd),
data = d, size = 0.5, position = position_nudge(x = .2),color = 'red') +
scale_fill_manual(values = mycol22) +  # 设置填充颜色
scale_color_manual(values = mycol22) +  # 设置点的颜色
theme_bw() +
theme(axis.text.x = element_text(size = 13, angle = 90, hjust = 1),  # 设置x轴标签垂直
axis.text.y = element_text(size = 13),
axis.title = element_text(size = 15),
legend.position = "none")
# 加载必要的包
library(dplyr)
library(caret)  # 用于数据集的分割
library(lightgbm)  # 用于LightGBM模型
library(Metrics)
# 将指定列转换为因子类型
factor_columns <- c('类别', '资费', '开发商', '支持系统', '中文', '韩文', '英文', '日文', '其他')
data_game3 <- filter(data_game2, !is.na(`评分`))
data_game3 <- data_game3 %>%
mutate_at(factor_columns, as.factor)
# 分割数据集为训练集和测试集7:3
set.seed(123)
train_index <- createDataPartition(data_game3$评分, p = 0.7, list = FALSE)
train_data <- data_game3[train_index, ]
test_data <- data_game3[-train_index, ]
# 准备LightGBM所需的数据格式
# 1. 将训练集和测试集中的目标列（评分）和特征分开
y_train <- train_data$评分
y_test <- test_data$评分
# 再将训练集分为训练子集和验证集，按照80:20的比例
train_sub_index <- createDataPartition(train_data$评分, p = 0.8, list = FALSE)
train_data <- train_data[train_sub_index, ]
valid_data <- train_data[-train_sub_index, ]
y_train <- y_train[train_sub_index]
y_valid <- y_train[-train_sub_index]
# 删除目标列和 '游戏名称' 列，保留自变量
train_data <- train_data %>% select(-评分, -游戏名称)
valid_data <- valid_data %>% select(-评分, -游戏名称)
test_data <- test_data %>% select(-评分, -游戏名称)
train_matrix <- as.matrix(train_data)
valid_matrix <- as.matrix(valid_data)
test_matrix <- as.matrix(test_data)
train_lgb <- lgb.Dataset(data = train_matrix, label = y_train)
valid_lgb <- lgb.Dataset(data = valid_matrix, label = y_valid)
# 设置LightGBM的参数
params <- list(
boosting_type = "gbdt",
objective = "regression",
metric = "rmse",
learning_rate = 0.01,
feature_fraction = 0.9
)
# 设置验证集
valids <- list(train = train_lgb, valid = valid_lgb)
# 训练LightGBM模型
lgb <- lgb.train(
params = params,
data = train_lgb,
nrounds = 500,  # 训练轮数
valids = valids,
early_stopping_rounds = 10,  # 如果验证集10轮没有提升，提前停止
verbose = -1
)
# 对训练集进行预测并计算各项指标
predicted_train <- predict(lgb, train_matrix)
train_rmse <- rmse(y_train, predicted_train)
train_mse <- mean((predicted_train - y_train)^2)
sst_train <- sum((y_train - mean(y_train))^2)
sse_train <- sum((y_train - predicted_train)^2)
r_squared_train <- 1 - sse_train / sst_train
# # 打印训练集结果
# print(paste("训练集 RMSE:", train_rmse))
# print(paste("训练集 MSE:", train_mse))
# print(paste("训练集 R²:", r_squared_train))
# 对测试集进行预测并计算各项指标
predicted_test <- predict(lgb, test_matrix)
test_rmse <- rmse(y_test, predicted_test)
test_mse <- mean((predicted_test - y_test)^2)
sst_test <- sum((y_test - mean(y_test))^2)
sse_test <- sum((y_test - predicted_test)^2)
r_squared_test <- 1 - sse_test / sst_test
#
# # 打印测试集结果
# print(paste("测试集 RMSE:", test_rmse))
# print(paste("测试集 MSE:", test_mse))
# print(paste("测试集 R²:", r_squared_test))
# 创建数据框
lgb_model_eval <- data.frame(
model = rep("LGB", 2),
mse = c(train_mse, test_mse),
rmse = c(train_rmse, test_rmse),
R2 = c(r_squared_train, r_squared_test),
dataset = factor(c("train", "test"))
)
# 打印结果
print(lgb_model_eval)
library(shapviz)
shp_lgb <- shapviz(lgb,X_pred =train_matrix)
#展示shap值
choose_row <- 2
sv_waterfall(shp_lgb,row_id = choose_row,max_display = 20)#瀑布图
sv_force(shp_lgb,row_id = choose_row,max_display = 20)#缩合图
#特征重要性评估
sv_importance(shp_lgb, kind = "beeswarm")#散点总结图
sv_importance(shp_lgb,fill="#fee08b")#条形图
View(data_tv1)
View(data_game2)
